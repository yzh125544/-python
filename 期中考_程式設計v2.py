# -*- coding: utf-8 -*-
"""期中考-程式設計

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RV1OyeTJ03v_za_HZX-9j5owZ_mGVHSt
"""

# ==============================================================================
# 2025 全國夏季學院 初級程式設計-Python-期中考
# ==============================================================================
# 葉政宏
# ==============================================================================
# Cell 1: 環境設定與套件安裝
# ==============================================================================
print("正在安裝必要的套件...")
print("✅套件安裝完成。")

import warnings
import logging
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties, findfont, _load_fontmanager
import matplotlib.gridspec as gridspec
import matplotlib.patches as mpatches
import seaborn as sns
import requests
import json
from datetime import datetime, timedelta
import time
import io
import os
from IPython.display import display, Markdown, clear_output
import ipywidgets as widgets
from tabulate import tabulate
from google.colab import userdata
from google.colab.userdata import SecretNotFoundError
import numpy as np
from scipy import stats

# ==============================================================================
# Cell 2: 繁體中文設定
# ==============================================================================
print("\n🔄 正在設定 Matplotlib 繁體中文環境...")
warnings.filterwarnings('ignore')
logging.getLogger('matplotlib').setLevel(logging.ERROR)

font_path = '/usr/share/fonts/truetype/NotoSansCJKtc-Regular.otf'

try:
    if not os.path.exists(font_path):
        print("   - 中文字體未找到，正在從網路下載...")
        get_ipython().system(f'wget -q https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKtc-hinted.zip && unzip -oq -p NotoSansCJKtc-hinted.zip NotoSansCJKtc-Regular.otf > {font_path} && rm NotoSansCJKtc-hinted.zip')
        _load_fontmanager(try_read_cache=False)
        print(f"   - 字體已安裝並刷新快取。")
    else:
        print(f"   - 偵測到已安裝的字體。")

    zh_font = FontProperties(fname=font_path, size=12)
    if findfont(zh_font) == font_path:
         print("\n✅ Matplotlib 繁體中文設定完成")
    else:
        raise RuntimeError("Matplotlib 未能成功載入中文字體，請嘗試重啟執行環境。")

except Exception as e:
    print(f"❌ 字體設定失敗: {e}")
    print("   請檢查您的網路連線或 Colab 環境權限。")

# ==============================================================================
# Cell 3: 主要程式
# ==============================================================================

class DataHandler:
    """
    負責從環境部開放資料平台獲取、清理及整合空氣品質資料。
    """
    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("請提供有效的 API 金鑰")
        self.api_key = api_key
        self.request_delay = 0.5
        self.max_retries = 3
        self.headers = {
            'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36')
        }

    def fetch_data_for_range(self, start_date_str: str, end_date_str: str) -> pd.DataFrame:
        """
        使用前一天23:59:59作為起始點，確保包含01/01資料
        """
        print(f" {'═'*15} 開始抓取資料 {'═'*15} ")
        print(f"   - 目標區間: {start_date_str} 至 {end_date_str}")

        all_records = []
        offset = 0
        limit = 1000

        # 計算前一天的23:59:59作為起始條件
        start_date_obj = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        prev_day = start_date_obj - timedelta(days=1)
        prev_day_str = prev_day.strftime('%Y-%m-%d')

        # 設定篩選條件
        start_condition = f"{prev_day_str} 23:59:59"  # 前一天的23:59:59
        end_condition = f"{end_date_str} 23:59:59"     # 結束日期的23:59:59

        print(f"   - 篩選條件: GT {start_condition} 且 LE {end_condition}")
        print(f"   - 邏輯說明: 大於 {start_condition}，小於等於 {end_condition}")

        while True:
            print(f"\r🔄 正在下載資料，目前已獲取 {len(all_records):,} 筆...", end="")
            url = "https://data.moenv.gov.tw/api/v2/aqx_p_488"
            params = {
                'format': 'json',
                'offset': offset,
                'limit': limit,
                'api_key': self.api_key,
                'filters': f'datacreationdate,GT,{start_condition}|datacreationdate,LE,{end_condition}',
                'sort': 'datacreationdate asc'
            }

            for attempt in range(self.max_retries + 1):
                try:
                    response = requests.get(url, params=params, headers=self.headers, timeout=60)
                    if response.status_code == 200:
                        batch_data = response.json()
                        records = batch_data.get('records', [])

                        if not records:
                            if offset == 0:
                                print("\n⚠️ 在指定區間內未找到任何資料。")
                                return pd.DataFrame()
                            else:
                                print(f"\n✅ 資料下載完成！")
                                return pd.DataFrame(all_records)

                        all_records.extend(records)

                        if len(records) < limit:
                            print(f"\n✅ 資料下載完成！")
                            return pd.DataFrame(all_records)

                        offset += limit
                        time.sleep(self.request_delay)
                        break
                    else:
                        raise requests.exceptions.HTTPError(f"狀態碼: {response.status_code}")
                except Exception as e:
                    if attempt < self.max_retries:
                        print(f"\n...下載失敗，正在重試 ({attempt+1}/{self.max_retries})...")
                        time.sleep(2 ** attempt)
                    else:
                        print(f"\n❌ 下載失敗，已達最大重試次數: {e}")
                        return pd.DataFrame(all_records)
        return pd.DataFrame(all_records)

    def clean_data(self, df: pd.DataFrame) -> (pd.DataFrame, dict):
        if df.empty:
            return pd.DataFrame(), {}

        print("\n🧹 正在進行資料清理與驗證...")
        raw_count = len(df)
        print(f"   - 清理前原始資料共: {raw_count:,} 筆。")

        df['datacreationdate'] = pd.to_datetime(df['datacreationdate'])

        if not df.empty:
            min_date = df['datacreationdate'].min()
            max_date = df['datacreationdate'].max()
            print(f"   - 實際資料時間範圍: {min_date} 至 {max_date}")

            target_start = pd.to_datetime("2025-01-01 00:00:00")
            target_end = pd.to_datetime("2025-03-31 23:59:59")

            original_count = len(df)
            df = df[
                (df['datacreationdate'] >= target_start) &
                (df['datacreationdate'] <= target_end)
            ]
            filtered_count = len(df)

            if original_count != filtered_count:
                removed_out_of_range = original_count - filtered_count
                print(f"   ✅ 成功移除 {removed_out_of_range} 筆超出範圍的資料")

            jan_first_morning = df[
                (df['datacreationdate'].dt.date == pd.to_datetime('2025-01-01').date()) &
                (df['datacreationdate'].dt.hour >= 0) &
                (df['datacreationdate'].dt.hour < 2)
            ]

            if not jan_first_morning.empty:
                print(f"✅ 成功保留 2025-01-01 00:00-02:00 時段資料: {len(jan_first_morning)} 筆（驗證是否有遺漏00:00時段的資料）")
                print(f"   - 最早資料時間: {jan_first_morning['datacreationdate'].min()}")
            else:
                print(f"   ⚠️ 未找到 2025-01-01 00:00時段資料")

        numeric_cols = ['aqi', 'pm2.5', 'pm10', 'o3', 'so2', 'co', 'no2']
        for col in numeric_cols:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')

        valid_rows = df['aqi'].notna() & df['county'].notna() & df['pm2.5'].notna()
        df_filtered = df[valid_rows].copy()

        cleaned_count = len(df_filtered)
        removed_count = raw_count - cleaned_count

        print(f"   - 最終保留資料共: {cleaned_count:,} 筆。")
        if removed_count > 0:
            print(f"   - (移除了 {removed_count:,} 筆無效資料)")

        if not df_filtered.empty:
            df_filtered['aqi'] = df_filtered['aqi'].astype(int)
            df_filtered['hour'] = df_filtered['datacreationdate'].dt.hour
            df_filtered['date'] = df_filtered['datacreationdate'].dt.date

        print("✅ 資料清理與驗證完成。")

        cleaning_stats = {
            "raw": raw_count,
            "cleaned": cleaned_count,
            "removed": removed_count
        }
        return df_filtered, cleaning_stats

class AQIVisualizer:
    def __init__(self, df: pd.DataFrame, cleaning_stats: dict, font_path: str):
        if df.empty:
            raise ValueError("視覺化工具無法處理空的 DataFrame。")
        self.full_df = df
        self.cleaning_stats = cleaning_stats
        self.font_prop = FontProperties(fname=font_path, size=12)
        self.font_prop_large = FontProperties(fname=font_path, size=14)
        self.font_prop_text = FontProperties(fname=font_path, size=14)
        self.font_prop_title = FontProperties(fname=font_path, size=24)
        self.font_prop_suptitle = FontProperties(fname=font_path, size=32)

        self.aqi_colors = {
            '良好': '#00e400', '普通': '#ffff00', '對敏感族群不健康': '#ff7e00',
            '不健康': '#ff0000', '非常不健康': '#99004c', '危害': '#7e0023'
        }
        self.category_order = list(self.aqi_colors.keys())

        sns.set_theme(style="whitegrid", font=self.font_prop.get_name())
        plt.rcParams['axes.unicode_minus'] = False

    def _categorize_aqi(self, aqi: int):
        if aqi <= 50: return '良好'
        if aqi <= 100: return '普通'
        if aqi <= 150: return '對敏感族群不健康'
        if aqi <= 200: return '不健康'
        if aqi <= 300: return '非常不健康'
        return '危害'

    def display_interactive_dashboard(self):
        sites = ['全台平均'] + sorted(self.full_df['sitename'].unique())
        site_select = widgets.Dropdown(options=sites, value='全台平均', description='選擇測站:')
        return_button = widgets.Button(description="返回全台視圖", button_style='info', layout=widgets.Layout(margin='0 0 0 10px'))
        controls = widgets.HBox([site_select, return_button])
        output = widgets.Output()

        def _update_dashboard(change):
            selected_site = change['new']
            with output:
                clear_output(wait=True)
                print(f"🔄 正在為「{selected_site}」生成圖表...")
                time.sleep(0.5)
                try:
                    display_df = self.full_df if selected_site == '全台平均' else self.full_df[self.full_df['sitename'] == selected_site]
                    self._plot_dashboard(display_df, selected_site)
                except Exception as e:
                    print(f"❌ 處理 {selected_site} 數據時發生錯誤: {e}")

        def on_return_button_clicked(b):
            site_select.value = '全台平均'

        site_select.observe(_update_dashboard, names='value')
        return_button.on_click(on_return_button_clicked)

        print("\n ========== 空氣品質分析 ========== ")
        display(controls, output)
        _update_dashboard({'new': '全台平均'})

    def _plot_dashboard(self, df: pd.DataFrame, title_site: str):
        if df.empty:
            print(f"❌ {title_site} 在此期間內無有效 AQI 資料。")
            return

        plt.close('all')
        fig = plt.figure(figsize=(20, 65))
        gs = gridspec.GridSpec(7, 2, figure=fig, height_ratios=[0.8, 1, 1.2, 1.2, 1.2, 1.2, 0.2])
        fig.suptitle(f'空氣品質分析圖 - {title_site}', fontproperties=self.font_prop_suptitle, y=0.99)

        ax_cleaning = fig.add_subplot(gs[0, :])
        ax_table_high = fig.add_subplot(gs[1, 0])
        ax_table_low = fig.add_subplot(gs[1, 1])
        ax_trend = fig.add_subplot(gs[2, :])
        ax_pm25_weekly = fig.add_subplot(gs[3, 0])
        ax_county_ratio = fig.add_subplot(gs[3, 1])
        ax_county_pm25 = fig.add_subplot(gs[4, :])
        ax_enhanced_scatter = fig.add_subplot(gs[5, 0])
        ax_cat_bar = fig.add_subplot(gs[5, 1])
        ax_legend = fig.add_subplot(gs[6, :])

        self._plot_data_cleaning_summary(ax_cleaning, title_site)

        self._plot_table(ax_table_high, 'AQI 最高前 10 測站', ascending=False, title_site=title_site)
        self._plot_table(ax_table_low, 'AQI 最低前 10 測站', ascending=True, title_site=title_site)

        ax_trend.set_title('AQI 趨勢與 24 小時移動平均圖', fontproperties=self.font_prop_title)
        hourly_avg = df.set_index('datacreationdate').resample('h')['aqi'].mean().dropna()

        ax_trend.axhspan(0, 50, facecolor=self.aqi_colors['良好'], alpha=0.3, zorder=0)
        ax_trend.axhspan(51, 100, facecolor=self.aqi_colors['普通'], alpha=0.3, zorder=0)
        ax_trend.axhspan(101, 150, facecolor=self.aqi_colors['對敏感族群不健康'], alpha=0.3, zorder=0)
        ax_trend.axhspan(151, 200, facecolor=self.aqi_colors['不健康'], alpha=0.3, zorder=0)

        ax_trend.scatter(hourly_avg.index, hourly_avg.values, label='每小時平均 AQI', color='dimgray', alpha=0.5, s=20, zorder=2)
        moving_avg = hourly_avg.rolling(window=24, min_periods=1).mean()
        ax_trend.plot(moving_avg.index, moving_avg.values, label='24小時移動平均', color='royalblue', linewidth=3, zorder=3)

        ax_trend.set_xlabel('日期時間', fontproperties=self.font_prop_large)
        ax_trend.set_ylabel('AQI 指數', fontproperties=self.font_prop_large)
        ax_trend.legend(prop=self.font_prop_large)
        ax_trend.grid(True, which='both', linestyle='--', linewidth=0.5)

        self._plot_pm25_weekly(ax_pm25_weekly, df, title_site)

        self._plot_county_aqi_ratio(ax_county_ratio, df, title_site)

        self._plot_county_pm25_comparison(ax_county_pm25, df, title_site)

        self._plot_enhanced_aqi_pm25_scatter(ax_enhanced_scatter, df, title_site)

        ax_cat_bar.set_title('AQI 分級佔比圖', fontproperties=self.font_prop_title)
        df_cat_bar = df.copy()
        df_cat_bar['aqi_category'] = pd.Categorical(df_cat_bar['aqi'].apply(self._categorize_aqi), categories=self.category_order, ordered=True)
        aqi_dist_pct = df_cat_bar['aqi_category'].value_counts(normalize=True).mul(100).sort_index()
        if not aqi_dist_pct.empty:
            bar_colors = [self.aqi_colors.get(cat) for cat in aqi_dist_pct.index]
            bars = ax_cat_bar.barh(aqi_dist_pct.index, aqi_dist_pct.values, color=bar_colors, edgecolor='black', linewidth=0.5)
            ax_cat_bar.set_xlabel('百分比 (%)', fontproperties=self.font_prop_large)
            for bar in bars:
                ax_cat_bar.text(bar.get_width() + 0.5, bar.get_y() + bar.get_height()/2, f'{bar.get_width():.1f}%',
                                va='center', ha='left', fontproperties=self.font_prop_large)
        else:
            ax_cat_bar.text(0.5, 0.5, '無有效分級資料', ha='center', va='center', fontproperties=self.font_prop_text)

        self._plot_color_legend(ax_legend)

        for ax in fig.get_axes():
            if ax not in [ax_table_high, ax_table_low, ax_legend]:
                for label in ax.get_xticklabels() + ax.get_yticklabels():
                    label.set_fontproperties(self.font_prop_large)

        plt.tight_layout(rect=[0, 0, 1, 0.97], h_pad=6, w_pad=4)
        plt.show()

    def _plot_table(self, ax, title, ascending, title_site):
        ax.set_title(title, fontproperties=self.font_prop_title)
        ax.axis('off')
        if title_site == '全台平均':
            site_data = self.full_df.groupby(['sitename', 'county'])['aqi'].mean().sort_values(ascending=ascending).head(10).reset_index()
            site_data['aqi'] = site_data['aqi'].round(1)
            site_data['測站'] = site_data.apply(lambda row: f"{row['sitename']} ({row['county']})", axis=1)
            table_data = site_data[['測站', 'aqi']]
            table_data.columns = ['測站', '平均 AQI']

            table = ax.table(cellText=table_data.values, colLabels=table_data.columns, loc='center', cellLoc='center')
            table.auto_set_font_size(False)
            table.set_fontsize(14)
            for (row, col), cell in table.get_celld().items():
                cell.set_text_props(fontproperties=self.font_prop_large)
                if row == 0:
                    cell.set_text_props(fontproperties=self.font_prop_large, weight='bold')
                    cell.set_facecolor('#f0f0f0')
            table.scale(1, 2.5)
        else:
            ax.text(0.5, 0.5, '此表格僅在「全台平均」範圍下顯示', ha='center', va='center', fontproperties=self.font_prop_text)

    def _plot_color_legend(self, ax):
        ax.set_title("AQI 等級顏色標準", fontproperties=self.font_prop_title)
        patches = [mpatches.Patch(color=color, label=label) for label, color in self.aqi_colors.items()]
        ax.legend(handles=patches, ncol=6, prop=self.font_prop_large, loc='center', frameon=False)
        ax.set_axis_off()

    def _plot_data_cleaning_summary(self, ax, title_site):
        ax.set_title("數據清理摘要圖", fontproperties=self.font_prop_title)
        if title_site == '全台平均':
            labels = [f"原始資料\n({self.cleaning_stats['raw']:,} 筆)",
                      f"移除無效資料\n({self.cleaning_stats['removed']:,} 筆)",
                      f"最終有效資料\n({self.cleaning_stats['cleaned']:,} 筆)"]
            counts = [self.cleaning_stats['raw'], self.cleaning_stats['removed'], self.cleaning_stats['cleaned']]
            colors = ['skyblue', 'salmon', 'lightgreen']

            bars = ax.bar(labels, counts, color=colors, width=0.6)
            ax.set_ylabel("資料筆數", fontproperties=self.font_prop_large)
            ax.tick_params(axis='x', labelsize=14)
            ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: "{:,}".format(int(x))))

            for bar in bars:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2.0, height, f'{height:,}', ha='center', va='bottom', fontproperties=self.font_prop_large)

            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
        else:
            ax.text(0.5, 0.5, '此圖表僅在「全台平均」視圖下顯示', ha='center', va='center', fontproperties=self.font_prop_text)

    def _plot_pm25_weekly(self, ax, df, title_site):
        """繪製PM2.5每週長條圖"""
        ax.set_title('PM2.5每週平均濃度圖', fontproperties=self.font_prop_title)

        if not df.empty:
            df_weekly = df.copy()
            df_weekly['week'] = df_weekly['datacreationdate'].dt.isocalendar().week

            weekly_pm25 = df_weekly.groupby('week')['pm2.5'].mean()

            bars = ax.bar(weekly_pm25.index, weekly_pm25.values, color='steelblue', edgecolor='black', linewidth=0.5)
            ax.set_xlabel('週次', fontproperties=self.font_prop_large)
            ax.set_ylabel('PM2.5 平均濃度 (μg/m³)', fontproperties=self.font_prop_large)

            for bar in bars:
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                       f'{bar.get_height():.1f}', ha='center', va='bottom', fontproperties=self.font_prop_large)
        else:
            ax.text(0.5, 0.5, '無有效PM2.5資料', ha='center', va='center', fontproperties=self.font_prop_text)

    def _plot_county_aqi_ratio(self, ax, df, title_site):
        """繪製各縣市分級AQI比例圖"""
        ax.set_title('各縣市AQI分級比例分布圖', fontproperties=self.font_prop_title)

        if title_site == '全台平均' and not df.empty:
            df_ratio = df.copy()
            df_ratio['aqi_category'] = df_ratio['aqi'].apply(self._categorize_aqi)

            county_aqi_dist = df_ratio.groupby(['county', 'aqi_category']).size().unstack(fill_value=0)
            county_aqi_ratio = county_aqi_dist.div(county_aqi_dist.sum(axis=1), axis=0) * 100

            county_aqi_ratio.plot(kind='barh', stacked=True, ax=ax,
                                color=[self.aqi_colors.get(cat, 'gray') for cat in county_aqi_ratio.columns],
                                width=0.8)
            ax.set_xlabel('百分比 (%)', fontproperties=self.font_prop_large)
            ax.set_ylabel('縣市', fontproperties=self.font_prop_large)

            legend = ax.legend(title='AQI分級', prop=self.font_prop, bbox_to_anchor=(1.05, 1), loc='upper left')
            legend.get_title().set_fontproperties(self.font_prop)

            for label in ax.get_yticklabels():
                label.set_fontproperties(self.font_prop_large)

            for label in ax.get_xticklabels():
                label.set_fontproperties(self.font_prop_large)

        else:
            ax.text(0.5, 0.5, '此圖表僅在「全台平均」視圖下顯示', ha='center', va='center', fontproperties=self.font_prop_text)

    def _plot_county_pm25_comparison(self, ax, df, title_site):
        """繪製各縣市平均PM2.5比較長條圖"""
        ax.set_title('各縣市平均PM2.5濃度比較圖（空氣品質排名）', fontproperties=self.font_prop_title)

        if title_site == '全台平均' and not df.empty:
            county_pm25_avg = df.groupby('county')['pm2.5'].mean().sort_values()
            colors = ['green' if x <= 15 else 'orange' if x <= 35 else 'red' for x in county_pm25_avg.values]

            bars = ax.bar(range(len(county_pm25_avg)), county_pm25_avg.values,
                         color=colors, edgecolor='black', linewidth=0.5)
            ax.set_xticks(range(len(county_pm25_avg)))
            ax.set_xticklabels(county_pm25_avg.index, rotation=45, ha='right')
            ax.set_ylabel('PM2.5 平均濃度 (μg/m³)', fontproperties=self.font_prop_large)

            for i, bar in enumerate(bars):
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                       f'{county_pm25_avg.values[i]:.1f}', ha='center', va='bottom',
                       fontproperties=self.font_prop_large)
            ax.axhline(y=15, color='green', linestyle='--', alpha=0.7, label='良好標準')
            ax.axhline(y=35, color='orange', linestyle='--', alpha=0.7, label='普通標準')
            ax.legend(prop=self.font_prop)
            best_county = county_pm25_avg.index[0]
            worst_county = county_pm25_avg.index[-1]
            ax.text(0.02, 0.98, f'空氣最好: {best_county}', transform=ax.transAxes,
                   fontproperties=self.font_prop_large, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen"))
            ax.text(0.02, 0.90, f'空氣最差: {worst_county}', transform=ax.transAxes,
                   fontproperties=self.font_prop_large, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightcoral"))
        else:
            ax.text(0.5, 0.5, '此圖表僅在「全台平均」視圖下顯示', ha='center', va='center', fontproperties=self.font_prop_text)

    def _plot_enhanced_aqi_pm25_scatter(self, ax, df, title_site):
        """繪製升級版AQI與PM2.5關聯分析圖"""
        ax.set_title('AQI-PM2.5 關聯分析圖', fontproperties=self.font_prop_title)

        if not df.empty and 'pm2.5' in df.columns and 'aqi' in df.columns:
            valid_data = df[df['pm2.5'].notna() & df['aqi'].notna()].copy()

            if len(valid_data) > 10:
                correlation = valid_data['aqi'].corr(valid_data['pm2.5'])

                slope, intercept, r_value, p_value, std_err = stats.linregress(valid_data['pm2.5'], valid_data['aqi'])

                valid_data['aqi_category'] = valid_data['aqi'].apply(self._categorize_aqi)

                ax.axhspan(0, 50, facecolor=self.aqi_colors['良好'], alpha=0.15, zorder=0)
                ax.axhspan(51, 100, facecolor=self.aqi_colors['普通'], alpha=0.15, zorder=0)
                ax.axhspan(101, 150, facecolor=self.aqi_colors['對敏感族群不健康'], alpha=0.15, zorder=0)
                ax.axhspan(151, 200, facecolor=self.aqi_colors['不健康'], alpha=0.15, zorder=0)
                ax.axhspan(201, 300, facecolor=self.aqi_colors['非常不健康'], alpha=0.15, zorder=0)

                for category in self.category_order:
                    category_data = valid_data[valid_data['aqi_category'] == category]
                    if not category_data.empty:
                        ax.scatter(category_data['pm2.5'], category_data['aqi'],
                                 color=self.aqi_colors[category],
                                 label=category, alpha=0.6, s=30,
                                 edgecolors='black', linewidth=0.3, zorder=2)

                x_range = np.linspace(valid_data['pm2.5'].min(), valid_data['pm2.5'].max(), 100)
                regression_line = slope * x_range + intercept
                ax.plot(x_range, regression_line, color='red', linewidth=2,
                       linestyle='--', alpha=0.8, zorder=3, label='回歸線')

                y_pred = slope * valid_data['pm2.5'] + intercept
                residuals = valid_data['aqi'] - y_pred
                mse = np.mean(residuals**2)
                confidence_interval = 1.96 * np.sqrt(mse)

                ax.fill_between(x_range, regression_line - confidence_interval,
                               regression_line + confidence_interval,
                               alpha=0.2, color='red', zorder=1)

                ax.set_xlabel('PM2.5 濃度 (μg/m³)', fontproperties=self.font_prop_large)
                ax.set_ylabel('AQI 指數', fontproperties=self.font_prop_large)

                stats_text = f'相關係數: {correlation:.3f}\n'
                stats_text += f'回歸方程式: AQI = {slope:.2f} × PM2.5 + {intercept:.1f}\n'
                stats_text += f'R² = {r_value**2:.3f}\n'
                stats_text += f'p值 = {p_value:.2e}\n'
                stats_text += f'資料數: {len(valid_data):,}'

                if abs(correlation) > 0.7:
                    box_color = 'lightgreen'
                elif abs(correlation) > 0.5:
                    box_color = 'lightyellow'
                else:
                    box_color = 'lightcoral'

                ax.text(0.02, 0.98, stats_text, transform=ax.transAxes,
                       fontproperties=self.font_prop, verticalalignment='top',
                       bbox=dict(boxstyle="round,pad=0.5", facecolor=box_color, alpha=0.8))

                ax.legend(prop=self.font_prop, loc='lower right',
                         bbox_to_anchor=(0.98, 0.02), framealpha=0.9)

                ax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)

                ax.set_xlim(left=0)
                ax.set_ylim(bottom=0)

            else:
                ax.text(0.5, 0.5, '資料點不足，無法進行分析', ha='center', va='center',
                       fontproperties=self.font_prop_text)
        else:
            ax.text(0.5, 0.5, '無有效AQI或PM2.5資料', ha='center', va='center',
                   fontproperties=self.font_prop_text)

def run_final_project():
    API_KEY = ""
    FALLBACK_KEY = "db5e5f36-b7c0-4f8f-910d-1d7955ce14b1"

    try:
        print("ℹ️ 嘗試從 Colab Secrets 讀取金鑰 'MOENV_API_KEY'...")
        API_KEY = userdata.get('MOENV_API_KEY')
        print("🔑 成功從 Colab Secrets 讀取金鑰。")
        print(f"🔑 使用的金鑰: {API_KEY[:10]}...")
    except (SecretNotFoundError, ImportError):
        print(f"⚠️ 警告：未在 Colab Secrets 中找到 'MOENV_API_KEY'。將使用內建的備用金鑰。")
        API_KEY = FALLBACK_KEY

    if not API_KEY:
        print("\n" + "🛑" * 25)
        print("🛑   執行已停止：無法獲取有效的API金鑰。")
        print("🛑" * 25)
        print("\n請在 Colab Secrets 中設定 'MOENV_API_KEY'。")
        return

    START_DATE = "2025-01-01"
    END_DATE = "2025-03-31"

    global zh_font
    FONT_PATH = '/usr/share/fonts/truetype/NotoSansCJKtc-Regular.otf'
    zh_font = FontProperties(fname=FONT_PATH)

    data_handler = DataHandler(API_KEY)
    raw_df = data_handler.fetch_data_for_range(start_date_str=START_DATE, end_date_str=END_DATE)
    df, cleaning_stats = data_handler.clean_data(raw_df)

    if df.empty:
        print("\n❌ 未獲取到任何有效資料，無法繼續執行。")
        return

    display(Markdown("---"))
    display(Markdown("### 原始資料預覽 (前 5 筆)"))
    display(df.head())

    display(Markdown("### 原始資料基本資訊"))
    buffer = io.StringIO()
    df.info(buf=buffer)
    print(f"<pre>{buffer.getvalue()}</pre>")

    print("🔬 正在執行多維度數據分析...")
    summary_stats = df['aqi'].describe()
    top_10_high = df.groupby(['sitename', 'county'])['aqi'].mean().nlargest(10)
    top_10_low = df.groupby(['sitename', 'county'])['aqi'].mean().nsmallest(10)
    print("✅ 數據分析完成。")

    display(Markdown("---"))
    display(Markdown("### 數據分析結果"))

    summary_df = pd.DataFrame(summary_stats)
    summary_df.columns = ['AQI 數值']
    display(Markdown("#### AQI 指數統計摘要"))
    print(tabulate(summary_df, headers='keys', tablefmt='pipe'))

    top_10_df = top_10_high.reset_index()
    top_10_df['測站'] = top_10_df.apply(lambda row: f"{row['sitename']} ({row['county']})", axis=1)
    top_10_df['平均 AQI'] = top_10_df['aqi'].round(1)
    display(Markdown("#### AQI 平均最高前 10 測站"))
    print(tabulate(top_10_df[['測站', '平均 AQI']], headers='keys', tablefmt='pipe', showindex=False))

    bottom_10_df = top_10_low.reset_index()
    bottom_10_df['測站'] = bottom_10_df.apply(lambda row: f"{row['sitename']} ({row['county']})", axis=1)
    bottom_10_df['平均 AQI'] = bottom_10_df['aqi'].round(1)
    display(Markdown("#### AQI 平均最低前 10 測站"))
    print(tabulate(bottom_10_df[['測站', '平均 AQI']], headers='keys', tablefmt='pipe', showindex=False))

    display(Markdown("---"))

    visualizer = AQIVisualizer(df, cleaning_stats, font_path=FONT_PATH)
    visualizer.display_interactive_dashboard()

    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        csv_filename = f"Enhanced_AQI_Analysis_{START_DATE}_to_{END_DATE}_{timestamp}.csv"
        df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
        print(f"\n💾 資料已儲存至檔案：{csv_filename}")
    except Exception as e:
        print(f"\n❌ 儲存檔案時發生錯誤: {e}")

run_final_project()